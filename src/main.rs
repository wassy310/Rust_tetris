fn main() {
    enum BlockKind {
        I,O, S, Z, J, L, T,
    }

    type BlockShape = [[usize; 4]; 4];
    const BLOCKS: [BlockShape; 7] = [
     // I
        [
            [0,0,0,0],
            [0,0,0,0],
            [1,1,1,1],
            [0,0,0,0],
        ],
        // O
        [
            [0,0,0,0],
            [0,1,1,0],
            [0,1,1,0],
            [0,0,0,0],
        ],
        // S
        [
            [0,0,0,0],
            [0,1,1,0],
            [1,1,0,0],
            [0,0,0,0],
        ],
        // Z
        [
            [0,0,0,0],
            [1,1,0,0],
            [0,1,1,0],
            [0,0,0,0],
        ],
        // J
        [
            [0,0,0,0],
            [1,0,0,0],
            [1,1,1,0],
            [0,0,0,0],
        ],
        // L
        [
            [0,0,0,0],
            [0,0,1,0],
            [1,1,1,0],
            [0,0,0,0],
        ],
        // T
        [
            [0,0,0,0],
            [0,1,0,0],
            [1,1,1,0],
            [0,0,0,0],
        ],
    ];

    let field = [
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1],
    ];

    let mut field_buf = field;
    for y in 0..4 {
        for x in 0..4 {
            field_buf[y+2][x+2] |= BLOCKS[BlockKind::I as usize][y][x];
            field_buf[y+2][x+7] |= BLOCKS[BlockKind::O as usize][y][x];
            field_buf[y+6][x+2] |= BLOCKS[BlockKind::S as usize][y][x];
            field_buf[y+6][x+7] |= BLOCKS[BlockKind::Z as usize][y][x];
            field_buf[y+10][x+2] |= BLOCKS[BlockKind::J as usize][y][x];
            field_buf[y+10][x+7] |= BLOCKS[BlockKind::L as usize][y][x];
            field_buf[y+14][x+2] |= BLOCKS[BlockKind::T as usize][y][x];
        }
    }

    for y in 0..21 {
        for x in 0..13 {
            if field_buf[y][x] == 1 {
                print!("[]");
            } else {
                print!(" .");
            }
        }
        println!();
    }
}
